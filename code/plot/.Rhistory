layout=coords,
vertex.size=80,
rescale=F,
vertex.color=area_colors,
vertex.frame.color=biome_colors,
vertex.frame.width=30,
vertex.label.dist=30,
vertex.label.degree=lab.locs,
mark.groups=mark_groups,
mark.col=mark_biome_colors,
mark.border=NA,
mark.expand=100,
mark.shape=-1/2,
edge.width=2, #E(g)$weight,
edge.arrow.size=0.5, #(E(g)$weight/max(E(g)$weight))^2,
edge.color=edge_colors,
edge.curved=seq(-1*curve, 1*curve, length = ecount(g)))
#legend('left',legend=seq(0.2,1.0,by=0.1), lwd=2, col=rev(gray.colors(n=6, start=0.0, end=0.8))) #,pt.cex=scaled,col='black',pch=21, pt.bg='orange')
dev.off()
mean_event = rowSums(state_bins,dims=2) * (1/n_iter)
prob_event = rowSums(hit_bins,dims=2) * (1/n_iter)
# format & filter
rownames(mean_event)=state_lbl; colnames(mean_event)=state_lbl
rownames(prob_event)=state_lbl; colnames(prob_event)=state_lbl
max(mean_event)
library(plotrix)
library(phytools)
source("/Users/mlandis/projects/vib_div/code/plot/phytools.mjl.R")
# IO
fp = "/Users/mlandis/projects/rb_sandbox/"
phy_fn = paste(fp, "clado_test.stoch.log", sep="")
plot_fp = paste(fp, "code/", sep="")
#col_fn = paste(plot_fp, "biome_colors.n4.txt",sep="")
# plotting settings
write_pdf = !FALSE
# read data
#dat_col = read.csv(col_fn)
dat_ch = read.table(phy_fn, sep="\t", header=T)
phy_fn
# IO
fp = "/Users/mlandis/projects/rb_sandbox/"
phy_fn = paste(fp, "output/clado_test.stoch.log", sep="")
plot_fp = paste(fp, "code/", sep="")
# plotting settings
write_pdf = !FALSE
# read data
#dat_col = read.csv(col_fn)
dat_ch = read.table(phy_fn, sep="\t", header=T)
dat_ch
# get phylo n_it, n_burn
phy = as.vector(dat_ch[,ncol(dat_ch)])
phy
# read/plot/append simmap trees
simphy = list()
iterations = dat_ch[,1]
iterations
n_it = length(iterations)
burn = 0.0
n_burn = max(1, floor(n_it * burn))
n_burn
phy
dev.off()
source('~/projects/rb_sandbox/code/plot_simmap.R')
source('~/projects/rb_sandbox/code/plot_simmap.R')
sim2$tip.label
length(sim2$tip.label)
source('~/projects/rb_sandbox/code/plot_simmap.R')
colnames(sim2$mapped.edge)
source('~/projects/rb_sandbox/code/plot_simmap.R')
colnames(sim2$mapped.edge
)
colnames(sim2$mapped.edge)
sim2$maps
source('~/projects/rb_sandbox/code/plot_simmap.R')
source('~/projects/rb_sandbox/code/plot_simmap.R')
source('~/projects/rb_sandbox/code/plot_simmap.R')
source('~/projects/rb_sandbox/code/plot_simmap.R')
source('~/projects/rb_sandbox/code/plot_simmap.R')
source('~/projects/rb_sandbox/code/plot_simmap.R')
source('~/projects/rb_sandbox/code/plot_simmap.R')
source('~/projects/rb_sandbox/code/plot_simmap.R')
source('~/projects/rb_sandbox/code/plot_simmap.R')
source('~/projects/rb_sandbox/code/plot_simmap.R')
source('~/projects/rb_sandbox/code/plot_simmap.R')
source('~/projects/rb_sandbox/code/plot_simmap.R')
source('~/projects/rb_sandbox/code/plot_simmap.R')
cols
colors
colnames(sim2$mapped.edge)
names(sim2$maps[[j]])
cols
source('~/projects/rb_sandbox/code/plot_simmap.R')
rainbow()
rainbow(10)
source('~/projects/rb_sandbox/code/plot_simmap.R')
source('~/projects/rb_sandbox/code/plot_simmap.R')
source('~/projects/rb_sandbox/code/plot_simmap.R')
source('~/projects/rb_sandbox/code/plot_simmap.R')
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
#col_fn = paste(fp, "code/plot/biome_range_colors.txt",sep="")
geo_fn = paste0(fp, "code/plot/areas_25.names.txt")
#st_lbl = unlist(st_lbl)
st_lbl = read.table( geo_fn )
st_lbl
#col_fn = paste(fp, "code/plot/biome_range_colors.txt",sep="")
geo_fn = paste0(fp, "code/plot/areas_25.names.txt")
out_fp = paste(fp, "output_trim/", sep="")
plot_fp = paste(fp, "code/plot/fig/ase/", sep="")
# read data
#dat_col = read.csv(col_fn) # color data
#st_lbl = lapply(dat_col$str, function(x){x})
#st_lbl = as.vector(unlist(as.vector(st_lbl)))
#names(st_lbl) = dat_col$str
st_lbl = read.table( geo_fn )$area
st_lbl = c(st_lbl, "...")
names(st_lbl) = c( as.vector(dat_col$state), "...")
# read data
dat_col = read.csv(dat_fn) # color data
# read data
dat_col = read.csv(geo_fn) # color data
dat_col
#st_lbl = lapply(dat_col$str, function(x){x})
#st_lbl = as.vector(unlist(as.vector(st_lbl)))
#names(st_lbl) = dat_col$str
#st_lbl = read.table( geo_fn )$area
st_lbl = c(dat_col$area, "...")
st_lbl
# read data
dat_col = read.csv(geo_fn) # color data
#st_lbl = lapply(dat_col$str, function(x){x})
#st_lbl = as.vector(unlist(as.vector(st_lbl)))
#names(st_lbl) = dat_col$str
#st_lbl = read.table( geo_fn )$area
st_lbl = c(dat_col$area, "...")
st_lbl
dat_col
dat_col$area
# read data
dat_col = read.csv(geo_fn, stringsAsFactors=F) # color data
#st_lbl = lapply(dat_col$str, function(x){x})
#st_lbl = as.vector(unlist(as.vector(st_lbl)))
#names(st_lbl) = dat_col$str
#st_lbl = read.table( geo_fn )$area
st_lbl = c(dat_col$area, "...")
st_lbl
names(st_lbl) = c( as.vector(dat_col$state), "...")
st_lbl
# IO
fp = "/Users/mlandis/projects/bg_asterales/"
base_fn = "test.1.Asteraceae.bg"
#col_fn = paste(fp, "code/plot/biome_range_colors.txt",sep="")
geo_fn = paste0(fp, "code/plot/areas_25.names.txt")
out_fp = paste(fp, "output_trim/", sep="")
plot_fp = paste(fp, "code/plot/fig/ase/", sep="")
# read data
dat_col = read.csv(geo_fn, stringsAsFactors=F) # color data
st_lbl = c(dat_col$area, "...")
names(st_lbl) = c( as.vector(dat_col$state), "...")
#biome_colors = read.csv("biome_colors.n4.txt",header=T)
st_colors = rainbow(start=0, end=0.9, n=25)
st_colors = c(st_colors, "gray")
#names(st_colors) = 1:nrow(dat_col)
names(st_colors) = st_lbl #dat_col$str
summary_statistic = "PieState"
st_lbl
# IO
fp = "/Users/mlandis/projects/bg_asterales/"
base_fn = "test.1.Asteraceae.bg"
#col_fn = paste(fp, "code/plot/biome_range_colors.txt",sep="")
geo_fn = paste0(fp, "code/plot/areas_25.names.txt")
out_fp = paste(fp, "output/", sep="")
plot_fp = paste(fp, "code/plot/fig/", sep="")
# read data
dat_col = read.csv(geo_fn, stringsAsFactors=F) # color data
st_lbl = c(dat_col$area, "...")
names(st_lbl) = c( as.vector(dat_col$state), "...")
#biome_colors = read.csv("biome_colors.n4.txt",header=T)
st_colors = rainbow(start=0, end=0.9, n=25)
st_colors = c(st_colors, "gray")
names(st_colors) = st_lbl
summary_statistic = "PieState"
ppl = list()
for (i in 1:length(base_fn)) {
fn = base_fn[i]
phy_fn = paste(fn, ".ase.tre",  sep="")
stree_fn = paste(out_fp, phy_fn, sep="")
zz=plot_ancestral_states(tree_file=stree_fn,
summary_statistic=summary_statistic,
state_labels=st_lbl,
state_colors=st_colors,
node_label_size=0,
node_size_range=c(0.5,2.0),
node_label_nudge_x=0.5,
tip_node_size=0.75,
tip_label_size=2*0.9,
tip_label_offset=0.5,
xlim_visible=c(0,75),
show_posterior_legend=T,
node_pie_diameter=5*1.2,
tip_pie_diameter=4*1.2,
pie_nudge_x=0.3,
pie_nudge_y=0.2,
alpha=1)
ppl[[i]] = zz
}
#stable = T
library(RevGadgets)
#source("~/projects/RevGadgets/R/plot_ancestral_states.R")
library(ggtree)
library(ggplot2)
library(gginnards)
library(deeptime)
library(cowplot)
add_epoch_times <- function( p, max_age, x_offset=0, dy=4 ) {
dy2 = dy+4
max_x = max(p$data$x)
max_y = max(p$data$y)
epoch_names = c("Late\nCretaceous","Paleogene","Early\nEocene","Mid/Late\nEocene","Oligocene","Early\nMiocene","Mid/Late\nMiocene","Recent")
x_pos = max_x-c(max_age, 65, 56, 48, 33.9, 23, 16, 5.3, 0)
y_pos = rep(max_y, length(x_pos))
x_pos_mid = ( x_pos[1:(length(x_pos)-1)] + x_pos[2:length(x_pos)] ) / 2
for (k in 2:(length(x_pos))) {
box_col = "gray92"
if (k %% 2 == 0) box_col = "white"
box = geom_rect( xmin=x_pos[k-1], xmax=x_pos[k], ymin=0-dy2, ymax=y_pos[k], fill=box_col )
p = append_layers(p, box, position = "bottom")
}
for (k in 1:length(epoch_names)) {
#p = p + geom_text( label=epoch_names[k], x=x_pos_mid[k], y=0-dy, hjust=0.5, size=2)
p = p + annotate( geom="text", label=epoch_names[k], x=x_pos_mid[k], y=0-dy, hjust=0.5, size=1.75)
}
return(p)
}
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
geo_fn = paste0(fp, "code/plot/areas_25.names.txt")
dat_col
dat_col = read.csv(geo_fn, stringsAsFactors=F) # color data
setNames
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
?add.simmap.legend
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
cols
sim2
sim2 = ladderize.simmap(sim2, right=F)
sim2
sim2$maps
sim2$mapped.edge
sim2 = read.simmap(text=phy[n])
sim2
phy[1]
sim2 = read.simmap(text=phy[n])
sim2$maps
sim2
sim2$mapped.edge
print(colnames(sim2$mapped.edge))
colnames(sim2$mapped.edge) = as.vector(as.numeric(colnames(sim2$mapped.edge))+fix)
colnames(sim2$mapped.edge)
n_states
cols = rainbow(n_states, start=0, end=0.9) #as.vector(dat_col$color)[1:4]
names(cols)=1:n_states #dat_col$name[1:4]
cols
colnames(sim2$mapped.edge)
sim2$maps[[j]]
sim2$maps[[3]]
sim2$maps[[4]]
as.vector( dat_col$area[ names(sim2$maps[[j]])+1 ] )
names(sim2$maps[[4]])
as.numeric(names(sim2$maps[[4]]))
as.numeric(names(sim2$maps[[4]]))+1
dat_col$area[ as.numeric(names(sim2$maps[[4]]))+1 ]
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
source('~/projects/bg_asterales/code/plot/plot_simmap.R')
N_S_TOTAL = 80
P_A_ACCEPT = 0.49
N_A_TOTAL = N_S_TOTAL / P_A_ACCEPT
N_A_TOTAL
N_A_EEPB_2020 = 6
N_A_EEPB_2019 = 7
N_A_rest_2019 = N_A_TOTAL - N_A_EEPB_2019
N_A_rest_2020 = N_A_TOTAL - N_A_EEPB_2020
N_S_TOTAL = 80
P_A_ACCEPT = 0.49
N_A_TOTAL = N_S_TOTAL / P_A_ACCEPT
N_A_EEPB_2020 = 6
N_A_EEPB_2019 = 7
N_A_rest_2019 = N_A_TOTAL - N_A_EEPB_2019
N_A_rest_2020 = N_A_TOTAL - N_A_EEPB_2020
N_A_rest_2020
N_A_rest_2019
num_accept_offer = 80
prob_accept_offer = 0.49
num_admission_offer = num_accept_offer / prob_accept_offer
num_accept = 80
prob_accept = 0.49
num_offer = num_accept / prob_accept
num_offer_eepb_2020 = 6
num_offer_eepb_2019 = 8
num_offer_rest_2019 = num_offer - num_offer_eepb_2019
num_offer_rest_2020 = num_offer - num_offer_eepb_2020
num_offer_rest_2020
num_offer_rest_2019_avg = num_offer_rest_2019 / (num_program_2019-1)
num_program_2019 = 11
num_offer_rest_2019_avg = num_offer_rest_2019 / (num_program_2019-1)
num_offer_rest_2019_avg
num_offer_eepb_2019 = 6 * (12/9)
num_offer_eepb_2019
6/80
num_accept_eepb_2019 = num_offer_eepb_2019 * prob_accept
num_accept_eepb_2020 = num_offer_eepb_2020 * prob_accept
num_accept_eepb_2019
num_accept_eepb_2020
prop_accept_eepb_2019 = num_accept_eepb_2019 / num_accept
prop_accept_eepb_2019
num_accept = 80
prob_accept = 0.49
num_offer = num_accept / prob_accept
num_offer
num_offer_eepb_2019 = 9
num_accept_eepb_2019 = num_offer_eepb_2019 * prob_accept
num_accept_eepb_2020 = num_offer_eepb_2020 * prob_accept
prop_accept_eepb_2019 = num_accept_eepb_2019 / num_accept
num_offer_rest_2019 = num_offer - num_offer_eepb_2019
num_offer_rest_2020 = num_offer - num_offer_eepb_2020
num_offer_rest_2019_avg = num_offer_rest_2019 / (num_program_2019-1)
num_offer_rest_2020
num_offer_rest_2019
num_offer_rest_2020 = (11/12)*(num_offer - num_offer_eepb_2020)
num_offer_rest_2020
dat = read.csv("~/Dropbox/Daisy_Biogeography/Data_for_bioregionalisation_and_ancestral_range_estimation_in_the_daisy_family/TDWG3_spatial_data_cleaned.csv")
dat
colnames(dat)
dat$LEVEL3_NAM
unique(dat$LEVEL3_NAM)
as.vector(unique(dat$LEVEL3_NAM))
x = matrix(NA, nrow=0, ncol=2)
for (n in nn) {
lbl = paste0( "\"",n,"\",\"\"" )
x = rbind(x, lbl)
}
nn = as.vector(unique(dat$LEVEL3_NA))
x = matrix(NA, nrow=0, ncol=2)
for (n in nn) {
lbl = paste0( "\"",n,"\",\"\"" )
x = rbind(x, lbl)
}
x
x = data.table(x)
x = data.frame(x)
x
x = data.frame(L3=nn, n25="")
x
dat = read.csv("~/projects/bg_asterales/data/Data_for_bioregionalisation_and_ancestral_range_estimation_in_the_daisy_family/TDWG3_spatial_data_cleaned.csv")
nn = as.vector(unique(dat$LEVEL3_NA))
x = data.frame(L3=nn, n25="")
write.table(x, file="~/projects/bg_asterales/data/Data_for_bioregionalisation_and_ancestral_range_estimation_in_the_daisy_family/TDWG3_to_bg.csv", sep=",")
x[,1]
x[,2]
x = data.frame(L3=nn, n25="", stringsAsFactors=F)
write.table(x, file="~/projects/bg_asterales/data/Data_for_bioregionalisation_and_ancestral_range_estimation_in_the_daisy_family/TDWG3_to_bg.csv", sep=",")
write.table(x, file="~/projects/bg_asterales/data/Data_for_bioregionalisation_and_ancestral_range_estimation_in_the_daisy_family/TDWG3_to_bg.csv", sep=",")
P = matrix( 0, nrow=3, ncol=3 )
rownames(P) <- colnames(P) <- c("0","1","2")
a = 0.1
b = 0.8
x = c(          1,          0,        0,
1-a,          a,        0,
(1-b)*(1-a),    (1-b)*a,        b)
P = matrix( x, nrow=3, ncol=3, byrow=T )
rownames(P) <- colnames(P) <- c("0","1","2")
P
a = 0.9
b = 0.8
x = c(          1,          0,        0,
1-a,          a,        0,
(1-b)*(1-a),    (1-b)*a,        b)
P = matrix( x, nrow=3, ncol=3, byrow=T )
rownames(P) <- colnames(P) <- c("0","1","2")
P
a = 0.9
b = 0.3
x = c(          1,          0,        0,
1-a,          a,        0,
(1-b)*(1-a),    (1-b)*a,        b)
P = matrix( x, nrow=3, ncol=3, byrow=T )
rownames(P) <- colnames(P) <- c("0","1","2")
P
a = 0.2
b = 0.7
x = c(          1,          0,        0,
1-a,          a,        0,
(1-b)*(1-a),    (1-b)*a,        b)
P = matrix( x, nrow=3, ncol=3, byrow=T )
rownames(P) <- colnames(P) <- c("0","1","2")
P
P
a = 0.7
b = 0.3
x = c(          1,          0,        0,
1-a,          a,        0,
(1-b)*(1-a),    (1-b)*a,        b)
P = matrix( x, nrow=3, ncol=3, byrow=T )
rownames(P) <- colnames(P) <- c("0","1","2")
P
source('~/projects/gh_vib_div/code/plot/plot_fig7_lstt.R')
setwd("~/projects/gh_vib_div/code/plot")
source('~/projects/gh_vib_div/code/plot/plot_fig7_lstt.R')
source('~/projects/gh_vib_div/code/plot/plot_fig7_lstt.R')
source('~/projects/gh_vib_div/code/plot/plot_fig7_lstt.R')
source('~/projects/gh_vib_div/code/plot/plot_fig7_lstt.R')
source('~/projects/gh_vib_div/code/plot/plot_fig7_lstt.R')
source('~/projects/gh_vib_div/code/plot/plot_fig7_lstt.R')
# directories
fp           = "../../"
source('~/projects/gh_vib_div/code/plot/plot_fig7_lstt.R')
setwd("~/projects/gh_vib_div/code/plot")
source('~/projects/gh_vib_div/code/plot/plot_fig7_lstt.R')
# Prepares Stage 3 dataframe for plotting in Fig 7
make_lstt_dat = function(state_bins, ages, min_sample=510) {
ret = list()
# create a melted data frame with Count/Support for Area/Biome over time (Age)
d1 = matrix(nrow=0, ncol=dim(state_bins)[1])
colnames(d1) = c("age","count","Area","Biome","Area_Biome","Support")
for (i in 1:dim(state_bins)[1]) {
for (j in 1:dim(state_bins)[2]) {
for (k in 1:dim(state_bins)[3]) {
d1 = rbind(d1, c( ages[k], state_bins[i,j,k], i, j, paste(i, j, sep="_"), 0))
}
}
}
# prepare column values
d2         = data.frame(d1, stringsAsFactors=FALSE)
d2$age     = as.numeric(d2$age)
d2$count   = as.numeric(d2$count)
d2$Support = as.numeric(d2$Support)
# compute confidence in state for each time step using
# multinomial confidence metric (SK Ernst)
biome_conf = t(apply( state_bins, 3, colSums))
bg_conf    = t(apply( state_bins, 3, rowSums))
min_sample = 1 #510
for (i in 1:n_bins) {
for (j in 1:n_biomes) {
if (biome_conf[i,j] > min_sample) {
biome_conf[i,j] = 1
} else {
biome_conf[i,j] = 0
}
}
for (j in 1:n_areas) {
if (bg_conf[i,j] > min_sample) {
bg_conf[i,j] = 1
} else {
bg_conf[i,j] = 0
}
}
}
# only show time-bins that have contain more samples than min_sample
d2_ages = unique(d2$age)
d2_bg_trunc = d2
d2_biome_trunc = d2
for (i in 1:length(d2_ages)) {
for (j in 1:n_areas) {
c_ij = d2_bg_trunc[ d2_bg_trunc$age==i & d2_bg_trunc$Area==j, ]$count
if (length(c_ij) == 0) {
# do nothing
} else {
d2_bg_trunc[ d2_bg_trunc$age==i & d2_bg_trunc$Area==j, ]$Support = bg_conf[i,j]
}
}
for (j in 1:n_biomes) {
c_ij = d2_biome_trunc[ d2_biome_trunc$age==i & d2_biome_trunc$Biome==j, ]$count
if (length(c_ij) == 0) {
# do nothing
} else {
d2_biome_trunc[ d2_biome_trunc$age==i & d2_biome_trunc$Biome==j, ]$Support = biome_conf[i,j]
}
}
}
ret$bg = d2_bg_trunc
ret$biome = d2_biome_trunc
return(ret)
}
min_sample
plot_dat = make_lstt_dat(state_bins, ages, 1) #min_sample)
state_bins
ages
